#BlueJ class context
comment0.params=
comment0.target=RedBlackTreePhoneBase()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ RedBlackTreePhoneBase\r\n
comment1.params=item\ t
comment1.target=int\ compare(java.lang.Long,\ RedBlackTreePhoneBase.RedBlackNode)
comment1.text=\r\n\ Compare\ item\ and\ t.element,\ using\ compareTo,\ with\r\n\ caveat\ that\ if\ t\ is\ header,\ then\ item\ is\ always\ larger.\r\n\ This\ routine\ is\ called\ if\ is\ possible\ that\ t\ is\ header.\r\n\ If\ it\ is\ not\ possible\ for\ t\ to\ be\ header,\ use\ compareTo\ directly.\r\n
comment10.params=
comment10.target=void\ printTree()
comment10.text=\r\n\ Print\ all\ items.\r\n
comment11.params=t
comment11.target=void\ printTree(RedBlackTreePhoneBase.RedBlackNode)
comment11.text=\r\n\ Internal\ method\ to\ print\ a\ subtree\ in\ sorted\ order.\r\n\ @param\ t\ the\ node\ that\ roots\ the\ tree.\r\n
comment2.params=n
comment2.target=boolean\ add(long)
comment2.text=\r\n\ Implementation\ of\ abstract\ method\ adds\ a\ phone\ number\ \r\n\ @param\ \ n\ \ \ \ phone\ number\ to\ be\ added\r\n\ @return\ \ \ \ \ \ true\ if\ added\ without\ duplicate,\ false\ otherwise\r\n
comment3.params=item
comment3.target=void\ insert(java.lang.Long)
comment3.text=\r\n\ Insert\ into\ the\ tree.\r\n\ @param\ item\ the\ item\ to\ insert.\r\n\ @throws\ DuplicateItemException\ if\ item\ is\ already\ present.\r\n
comment4.params=item
comment4.target=void\ handleReorient(long)
comment4.text=\r\n\ Internal\ routine\ that\ is\ called\ during\ an\ insertion\r\n\ if\ a\ node\ has\ two\ red\ children.\ Performs\ flip\ and\ rotations.\r\n\ @param\ item\ the\ item\ being\ inserted.\r\n
comment5.params=item\ parent
comment5.target=RedBlackTreePhoneBase.RedBlackNode\ rotate(long,\ RedBlackTreePhoneBase.RedBlackNode)
comment5.text=\r\n\ Internal\ routine\ that\ performs\ a\ single\ or\ double\ rotation.\r\n\ Because\ the\ result\ is\ attached\ to\ the\ parent,\ there\ are\ four\ cases.\r\n\ Called\ by\ handleReorient.\r\n\ @param\ item\ the\ item\ in\ handleReorient.\r\n\ @param\ parent\ the\ parent\ of\ the\ root\ of\ the\ rotated\ subtree.\r\n\ @return\ the\ root\ of\ the\ rotated\ subtree.\r\n
comment6.params=k2
comment6.target=RedBlackTreePhoneBase.RedBlackNode\ rotateWithLeftChild(RedBlackTreePhoneBase.RedBlackNode)
comment6.text=\r\n\ Rotate\ binary\ tree\ node\ with\ left\ child.\r\n
comment7.params=k1
comment7.target=RedBlackTreePhoneBase.RedBlackNode\ rotateWithRightChild(RedBlackTreePhoneBase.RedBlackNode)
comment7.text=\r\n\ Rotate\ binary\ tree\ node\ with\ right\ child.\r\n
comment8.params=k
comment8.target=long\ select(int)
comment8.text=\r\n\ Implementation\ of\ abstract\ method\ select\ the\ kth\ smallest\ phone\ number\ \r\n\ @param\ \ k\ \ \ \ index\ of\ a\ given\ stored\ phone\ number\r\n\ @return\ \ \ \ \ \ the\ kth\ smallest\ phone\ number\ \r\n
comment9.params=k\ t
comment9.target=RedBlackTreePhoneBase.RedBlackNode\ findKth(int,\ RedBlackTreePhoneBase.RedBlackNode)
comment9.text=\r\n\ Internal\ method\ to\ find\ kth\ smallest\ item\ in\ a\ subtree\r\n\ @param\ k\ the\ desired\ rank(1\ is\ the\ smallest\ item)\r\n\ @return\ the\ node\ containing\ the\ kth\ smallest\ item\ in\ the\ subtree\r\n\ @throws\ IllegalArgumentException\ if\ k\ is\ less\ than\ 1\ or\ more\r\n\ than\ the\ size\ of\ the\ subtree\r\n
numComments=12
