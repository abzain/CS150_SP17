#BlueJ class context
comment0.params=
comment0.target=BinarySearchTree()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ BinarySearchTree\r\n
comment1.params=input
comment1.target=boolean\ insert(java.lang.Comparable)
comment1.text=\r\n\ return\ -\ true\ if\ inserted\ without\ duplicates,\r\n\ false\ otherwise\r\n
comment2.params=input
comment2.target=boolean\ contains(java.lang.Comparable)
comment2.text=\r\n\ return\ -\ true\ if\ tree\ contains\ key\ (input),\r\n\ false\ otherwise\r\n
comment3.params=input\ t
comment3.target=boolean\ contains(java.lang.Comparable,\ BinaryNode)
comment3.text=\r\n\ recursive\ contains\r\n
comment4.params=input
comment4.target=boolean\ remove(java.lang.Comparable)
comment4.text=\r\n\ return\ -\ true\ if\ removes\ specified\ input\ from\r\n\ tree\ if\ present,\ false\ otherwise\r\n\ Also\ implements\ removal\ of\ the\ min\ item\ \r\n\ from\ subtree\r\n
comment5.params=input\ t
comment5.target=boolean\ remove(java.lang.Comparable,\ BinaryNode)
comment5.text=\r\n\ recursive\ remove\ method\r\n
comment6.params=
comment6.target=java.lang.Comparable\ findMax()
comment6.text=\r\n\ return\ -\ largest\ item\ from\ tree\r\n
comment7.params=t
comment7.target=java.lang.Comparable\ findMax(BinaryNode)
comment7.text=\r\n\ recursive\ find\ min\r\n
comment8.params=
comment8.target=java.lang.Comparable\ findMin()
comment8.text=\r\n\ return\ -\ smallest\ item\ from\ tree\r\n
comment9.params=t
comment9.target=java.lang.Comparable\ findMin(BinaryNode)
comment9.text=\r\n\ recursive\ find\ min\r\n
numComments=10
